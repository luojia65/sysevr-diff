commit 2b15f410bd2c333add4db2e7c96f457cdac3d149
Author:     Michael S. Tsirkin <mst@redhat.com>
AuthorDate: Thu Apr 3 19:50:56 2014 +0300
Commit:     Michael Roth <mdroth@linux.vnet.ibm.com>
CommitDate: Thu Jun 26 13:59:50 2014 -0500

    virtio-net: out-of-bounds buffer write on invalid state load
    
    CVE-2013-4150 QEMU 1.5.0 out-of-bounds buffer write in
    virtio_net_load()@hw/net/virtio-net.c
    
    This code is in hw/net/virtio-net.c:
    
        if (n->max_queues > 1) {
            if (n->max_queues != qemu_get_be16(f)) {
                error_report("virtio-net: different max_queues ");
                return -1;
            }
    
            n->curr_queues = qemu_get_be16(f);
            for (i = 1; i < n->curr_queues; i++) {
                n->vqs[i].tx_waiting = qemu_get_be32(f);
            }
        }
    
    Number of vqs is max_queues, so if we get invalid input here,
    for example if max_queues = 2, curr_queues = 3, we get
    write beyond end of the buffer, with data that comes from
    wire.
    
    This might be used to corrupt qemu memory in hard to predict ways.
    Since we have lots of function pointers around, RCE might be possible.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Michael Roth <mdroth@linux.vnet.ibm.com>
    Signed-off-by: Juan Quintela <quintela@redhat.com>
    (cherry picked from commit eea750a5623ddac7a61982eec8f1c93481857578)
    Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>

diff --git a/hw/net/virtio-net.c b/hw/net/virtio-net.c
index ec96862ed6..e00d1c0810 100644
--- a/hw/net/virtio-net.c
+++ b/hw/net/virtio-net.c
@@ -1387,6 +1387,11 @@ static int virtio_net_load(QEMUFile *f, void *opaque, int version_id)
         }
 
         n->curr_queues = qemu_get_be16(f);
+        if (n->curr_queues > n->max_queues) {
+            error_report("virtio-net: curr_queues %x > max_queues %x",
+                         n->curr_queues, n->max_queues);
+            return -1;
+        }
         for (i = 1; i < n->curr_queues; i++) {
             n->vqs[i].tx_waiting = qemu_get_be32(f);
         }
